{"version":3,"sources":["hooks/useGoogleOptimize.js","modules/counter.js","api/post.js","lib/asyncUtils.js","modules/posts.js","modules/index.js","component/PostList.js","container/PostListContainer.js","pages/Apage.js","pages/PostListPage.js","component/Post.js","container/PostContainer.js","pages/PostPage.js","App.js","index.js"],"names":["gtag","window","apply","arguments","Array","isArray","dataLayer","push","useGoogleOptimize","experimentId","variants","timeout","Infinity","useState","variant","setVariant","useEffect","optimizeTimedOut","setTimeout","removeCallback","callback","value","clearTimeout","Number","name","remove","INCREASE","DECREASE","sleep","n","Promise","resolve","posts","id","title","body","getPosts","a","getPostById","find","post","createPromiseThunk","type","promiseCreator","SUCCESS","ERROR","param","dispatch","payload","error","handleAsyncActions","key","state","action","reducerUtils","loading","success","initial","data","prevState","postsAPI","getPost","initialState","getPostsReducer","getPostReducer","rootReducer","combineReducers","counter","PostList","map","to","PostListContainer","props","useSelector","useDispatch","Apage","PostListPage","onClick","ReactGA","ga","Post","PostContainer","postId","PostPage","match","params","parseInt","createHistory","initialize","App","location","useLocation","pageview","pathname","search","console","log","path","component","exact","store","createStore","composeWithDevTools","applyMiddleware","ReduxThunk","logger","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.61841908.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\n// Usage:\r\n// const Page = useGoogleOptimize('hhWP8gOsTvvT2P_KlFjw', [PageA, PageB])\r\n// return <Page/>\r\nfunction useGoogleOptimize(experimentId, variants, timeout = Infinity) {\r\n    const [variant, setVariant] = useState(null);\r\n\r\n    useEffect(\r\n        () => {\r\n            // Sets a timeout\r\n            let optimizeTimedOut;\r\n\r\n            if (timeout !== Infinity) {\r\n                optimizeTimedOut = setTimeout(() => {\r\n                    // Clears the callback just in case this was a network timeout\r\n                    removeCallback();\r\n                    // Defaults to the 'Original'\r\n                    setVariant(0);\r\n                }, timeout);\r\n            }\r\n            // Sets the variant returned by Optimize and clears the timeout check\r\n            const callback = (value) => {\r\n                optimizeTimedOut && clearTimeout(optimizeTimedOut);\r\n                setVariant(Number(value));\r\n            };\r\n            // Documented here:\r\n            // https://support.google.com/optimize/answer/9059383?hl=en\r\n            // @ts-ignore\r\n            gtag('event', 'optimize.callback', {\r\n                name: experimentId,\r\n                callback,\r\n            });\r\n\r\n            // Cleans up the optimize callback if the request times out\r\n            const removeCallback = () => {\r\n                optimizeTimedOut && clearTimeout(optimizeTimedOut);\r\n                // @ts-ignore\r\n                gtag('event', 'optimize.callback', {\r\n                    name: experimentId,\r\n                    callback,\r\n                    remove: true,\r\n                });\r\n            };\r\n            // Unregisters the event when the parent is unmounted or the experiment\r\n            // id is changed\r\n            return removeCallback;\r\n        },\r\n        // Only update if the experiment ID changes\r\n        [experimentId, timeout]\r\n    );\r\n    // When testing functions you should use null checks. No special treatment\r\n    // is necessary with React components.\r\n    return variant === null ? null : variants[variant];\r\n}\r\n\r\nfunction gtag() {\r\n    if (typeof window !== 'undefined') {\r\n        if (typeof window.gtag === 'function') {\r\n            // eslint-disable-next-line prefer-rest-params\r\n            window.gtag.apply(null, arguments);\r\n        } else if (Array.isArray(window.dataLayer)) {\r\n            // eslint-disable-next-line prefer-rest-params\r\n            window.dataLayer.push(arguments);\r\n        } else {\r\n            if (\r\n                typeof process !== 'undefined' &&\r\n                process.env.NODE_ENV !== 'production' &&\r\n                !didWarn\r\n            ) {\r\n                didWarn = true;\r\n                console.warn(\r\n                    '[@react-hook/google-optimize] Google Tag Manager was not found on your site. Neither \"gtag()\" or \"dataLayer[]\" could be located on the \"window\". If you are not using Google Tag Manager in dev you can ignore this warning. Otherwise, see the Google Tag Manager dev guide for examples: https://developers.google.com/tag-manager/devguide'\r\n                );\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlet didWarn = false;\r\n\r\n// declare global {\r\n//   interface Window {\r\n//     dataLayer\r\n//   }\r\n// }\r\n\r\nexport default useGoogleOptimize;\r\n","const INCREASE = \"counter/INCREASE\";\r\nconst DECREASE = \"counter/DECREASE\";\r\n\r\nexport const increase = () => ({ type: INCREASE });\r\nexport const decrease = () => ({ type: DECREASE });\r\n\r\nexport const increaseAsync = () => (dispatch) => {\r\n  setTimeout(() => {\r\n    dispatch(increase());\r\n  }, 1000);\r\n};\r\n\r\nexport const decreaseAsync = () => (dispatch) => {\r\n  setTimeout(() => {\r\n    dispatch(decrease());\r\n  }, 1000);\r\n};\r\n\r\nconst initialState = 0;\r\n\r\nexport default function counter(state = initialState, action) {\r\n  switch (action.type) {\r\n    case INCREASE:\r\n      return state + 1;\r\n    case DECREASE:\r\n      return state - 1;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","const sleep = (n) => new Promise((resolve) => setTimeout(resolve, n));\r\n\r\n//id,title, body\r\n\r\nconst posts = [\r\n  { id: 1, title: \"abc\", body: \"abc body\" },\r\n  { id: 2, title: \"22 title\", body: \"222 body\" },\r\n  { id: 3, title: \"33 example\", body: \"3번째 body\" },\r\n];\r\n\r\nexport const getPosts = async () => {\r\n  await sleep(500);\r\n  return posts;\r\n};\r\n\r\nexport const getPostById = async (id) => {\r\n  await sleep(500);\r\n  return posts.find((post) => post.id === id);\r\n};\r\n","export const createPromiseThunk = (type, promiseCreator) => {\r\n  const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\r\n\r\n  return (param) => async (dispatch) => {\r\n    dispatch({ type });\r\n    try {\r\n      const payload = await promiseCreator(param);\r\n      dispatch({\r\n        type: SUCCESS,\r\n        payload,\r\n      });\r\n    } catch (e) {\r\n      dispatch({\r\n        type: ERROR,\r\n        payload: e,\r\n        error: true,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\n//key = posts, post 등등,,\r\nexport const handleAsyncActions = (type, key) => {\r\n  const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\r\n  return (state, action) => {\r\n    switch (action.type) {\r\n      case type:\r\n        return {\r\n          ...state,\r\n          [key]: reducerUtils.loading(),\r\n        };\r\n      case SUCCESS:\r\n        return {\r\n          ...state,\r\n          [key]: reducerUtils.success(action.payload),\r\n        };\r\n      case ERROR:\r\n        return {\r\n          ...state,\r\n          [key]: reducerUtils.error(action.payload),\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n};\r\n\r\nexport const reducerUtils = {\r\n  initial: (data = null) => ({\r\n    data,\r\n    loading: false,\r\n    error: null,\r\n  }),\r\n  loading: (prevState = null) => ({\r\n    data: prevState,\r\n    loading: true,\r\n    error: null,\r\n  }),\r\n  success: (data) => ({\r\n    data,\r\n    loading: false,\r\n    error: null,\r\n  }),\r\n  error: (error) => ({\r\n    data: null,\r\n    loading: false,\r\n    error,\r\n  }),\r\n};\r\n","import * as postsAPI from \"../api/post\";\r\n\r\nimport {\r\n  createPromiseThunk,\r\n  handleAsyncActions,\r\n  reducerUtils,\r\n} from \"../lib/asyncUtils\";\r\n\r\nconst GET_POSTS = \"GET_POSTS\";\r\nconst GET_POSTS_SUCCESS = \"GET_POSTS_SUCCESS\";\r\nconst GET_POSTS_ERROR = \"GET_POSTS_ERROR\";\r\n\r\nconst GET_POST = \"GET_POST\";\r\nconst GET_POST_SUCCESS = \"GET_POST_SUCCESS\";\r\nconst GET_POST_ERROR = \"GET_POST_ERROR\";\r\n\r\nexport const getPosts = createPromiseThunk(GET_POSTS, postsAPI.getPosts);\r\nexport const getPost = createPromiseThunk(GET_POST, postsAPI.getPostById);\r\n\r\nconst initialState = {\r\n  posts: reducerUtils.initial(),\r\n  post: reducerUtils.initial(),\r\n};\r\n\r\nconst getPostsReducer = handleAsyncActions(GET_POSTS, \"posts\");\r\nconst getPostReducer = handleAsyncActions(GET_POST, \"post\");\r\n\r\nexport default function posts(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_POSTS:\r\n    case GET_POSTS_SUCCESS:\r\n    case GET_POSTS_ERROR:\r\n      return getPostsReducer(state, action);\r\n\r\n    case GET_POST:\r\n    case GET_POST_SUCCESS:\r\n    case GET_POST_ERROR:\r\n      return getPostReducer(state, action);\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport counter from \"./counter\";\r\nimport posts from \"./posts\";\r\n\r\nconst rootReducer = combineReducers({ counter, posts });\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction PostList({ posts }) {\r\n    return (\r\n        <ul>\r\n            {posts.map((post) => (\r\n                <li key={post.id}>\r\n                    <Link to={`/react_redux_middleware/${post.id}`}>\r\n                        {post.title}\r\n                    </Link>\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default PostList;\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport PostList from \"../component/PostList\";\r\nimport { getPosts } from \"../modules/posts\";\r\n\r\nfunction PostListContainer(props) {\r\n  const { data, loading, error } = useSelector((state) => state.posts.posts);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getPosts());\r\n  }, [dispatch]);\r\n\r\n  if (loading) return <div>...로딩중</div>;\r\n  if (error) return <div>..에러 발생!!</div>;\r\n  if (!data) return null;\r\n\r\n  return <PostList posts={data} />;\r\n}\r\n\r\nexport default PostListContainer;\r\n","import React from 'react';\r\n\r\nfunction Apage() {\r\n    return (\r\n        <>\r\n            <h3>A page 입니다.</h3>\r\n            <p>AAAAAAA</p>\r\n        </>\r\n    );\r\n}\r\nexport default Apage;\r\n","import React from 'react';\nimport ReactGA from 'react-ga';\nimport { Link } from 'react-router-dom';\nimport PostListContainer from '../container/PostListContainer';\nimport useGoogleOptimize from '../hooks/useGoogleOptimize';\n\nfunction PostListPage() {\n    const variant = useGoogleOptimize('rqR89vK7TZGhHvB9wS_6ig', [false, true]);\n    return (\n        <>\n            <PostListContainer />\n            <Link to={`/react_redux_middleware/a`}> A page로 이동 </Link>\n            <button\n                onClick={ReactGA.ga(\n                    'send',\n                    'event',\n                    'button_click',\n                    'click',\n                    'A'\n                )}\n            >\n                {' '}\n                A 동영상 클릭\n            </button>\n            <button\n                onClick={ReactGA.ga(\n                    'send',\n                    'event',\n                    'button_click',\n                    'click',\n                    'B'\n                )}\n            >\n                {' '}\n                B 동영상 클릭\n            </button>\n            <div>test</div>\n            {variant ? <div>Variant 1</div> : <div>Variant 2</div>}\n        </>\n    );\n}\nexport default PostListPage;\n","import React from \"react\";\r\n\r\nfunction Post({ post }) {\r\n  const { title, body } = post;\r\n\r\n  return (\r\n    <div>\r\n      <h1>{title}</h1>\r\n      <p>{body}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Post;\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport Post from \"../component/Post\";\r\nimport { getPost } from \"../modules/posts\";\r\n\r\nfunction PostContainer({ postId }) {\r\n  const { data, loading, error } = useSelector((state) => state.posts.post);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getPost(postId));\r\n  }, [postId, dispatch]);\r\n\r\n  if (loading) return <div>...로딩중</div>;\r\n  if (error) return <div>에러발생</div>;\r\n  if (!data) return null;\r\n\r\n  return <Post post={data} />;\r\n}\r\n\r\nexport default PostContainer;\r\n","import React from \"react\";\r\nimport PostContainer from \"../container/PostContainer\";\r\n\r\nfunction PostPage({ match }) {\r\n  const { id } = match.params;\r\n  const postId = parseInt(id, 10);\r\n\r\n  return <PostContainer postId={postId}></PostContainer>;\r\n}\r\n\r\nexport default PostPage;\r\n","import createHistory from 'history/createBrowserHistory';\r\nimport React, { useEffect } from 'react';\r\nimport ReactGA from 'react-ga';\r\nimport { Route, useLocation } from 'react-router-dom';\r\nimport './App.css';\r\nimport Apage from './pages/Apage';\r\nimport PostListPage from './pages/PostListPage';\r\nimport PostPage from './pages/PostPage';\r\n// ReactGA.initialize('UA-195164062-1');\r\n// ReactGA.pageview(window.location.pathname + window.location.search);\r\n\r\n// const getGA = () => {\r\n//     console.log('페이지 들어옴');\r\n\r\n//     const pathName = window.location.pathname;\r\n\r\n//     ReactGA.initialize('UA-195164062-1');\r\n//     console.log(pathName);\r\n//     ReactGA.set({ page: pathName });\r\n\r\n//     ReactGA.pageview(pathName);\r\n// };\r\n\r\nconst history = createHistory();\r\nReactGA.initialize('UA-195164062-1');\r\n// history.listen((location, action) => {\r\n//     ReactGA.pageview(location.pathname + location.search);\r\n//     console.log(location.pathname);\r\n// });\r\n\r\nfunction App() {\r\n    const location = useLocation();\r\n\r\n    useEffect(() => {\r\n        ReactGA.pageview(location.pathname + location.search);\r\n        console.log(`${location.pathname + location.search}`);\r\n    }, [location]);\r\n\r\n    return (\r\n        <>\r\n            <Route\r\n                path=\"/react_redux_middleware\"\r\n                component={PostListPage}\r\n                exact\r\n            />\r\n            <Route path=\"/react_redux_middleware/:id\" component={PostPage} />\r\n            <Route path=\"/react_redux_middleware/a\" component={Apage} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport rootReducer from \"./modules/index\";\r\nimport \"./index.css\";\r\nimport CounterContainer from \"./container/CounterContainer\";\r\n// import myLogger from \"./middlewares/myLogger\";\r\nimport logger from \"redux-logger\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport ReduxThunk from \"redux-thunk\";\r\nimport PostListContainer from \"./container/PostListContainer\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport App from \"./App\";\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(ReduxThunk, logger))\r\n);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}